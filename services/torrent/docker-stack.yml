version: "3.7"

networks:
  traefik_private:
    external: true
  internal:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 172.16.203.0/24

volumes:
  qbitorrent:
  radarr:
  sonarr:
  jackett:

services:
  wireguard:
    image: linuxserver/wireguard:arm64v8-version-v1.0.20210914
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3
      labels:
        - traefik.enable=false
    hostname: wireguard
    env_file:
      - ./wireguard/.env_wireguard
    networks:
      - internal
      - traefik_private
    cap_add:
      - NET_ADMIN
    volumes:
      - /lib/modules:/lib/modules
      - ./wireguard/wg0.conf:/config/wg0.conf
      - ./wireguard/dante-server/danted.conf:/etc/danted.conf
      - ./wireguard/dante-server/install.sh:/custom-cont-init.d/install.sh:ro
      - ./wireguard/dante-server/run.sh:/custom-services.d/run.sh:ro
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=0

  qbittorrent:
    image: linuxserver/qbittorrent:arm64v8-4.5.2
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3
      labels:
        - traefik.enable=true
        - traefik.http.routers.qbittorrent.tls=true
        - traefik.http.routers.qbittorrent.rule=PathPrefix(`/qbittorrent`)
        - traefik.http.routers.qbittorrent.middlewares=qbittorrent-stripprefix
        - traefik.http.middlewares.qbittorrent-stripprefix.stripprefix.prefixes=/qbittorrent
        - traefik.http.services.qbittorrent.loadbalancer.server.port=8080
    hostname: qbittorrent
    env_file:
      - ./qbittorrent/.env_qbittorrent
      - .vpn_ip
    networks:
      - traefik_private
    volumes:
      - qbitorrent:/config
      - ./qbittorrent/qBittorrent.conf:/config/qBittorrent/qBittorrent.conf
      - ./ip-test.sh:/opt/ip-test.sh
      - /media/disk2/downloads:/downloads
    # healthcheck:
    #   test: ["CMD", "/opt/ip-test.sh"]
    #   interval: 2m
    #   timeout: 10s
    #   retries: 3

  radarr:
    image: linuxserver/radarr:arm64v8-4.4.4
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3
      labels:
        - traefik.enable=true
        - traefik.http.routers.radarr.tls=true
        - traefik.http.routers.radarr.rule=PathPrefix(`/radarr`)
        - traefik.http.services.radarr.loadbalancer.server.port=7878
    hostname: radarr
    env_file:
      - ./radarr/.env_radarr
      - .vpn_ip
    networks:
      - traefik_private
    volumes:
      - radarr:/config
      - ./radarr/config.xml:/config/config.xml
      - ./ip-test.sh:/opt/ip-test.sh
      - /media/disk2/downloads:/downloads
    # healthcheck:
    #   test: ["CMD", "/opt/ip-test.sh"]
    #   interval: 2m
    #   timeout: 10s
    #   retries: 3

  sonarr:
    image: linuxserver/sonarr:arm64v8-3.0.10
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3
      labels:
        - traefik.enable=true
        - traefik.http.routers.sonarr.tls=true
        - traefik.http.routers.sonarr.rule=PathPrefix(`/sonarr`)
        - traefik.http.services.sonarr.loadbalancer.server.port=8989
    hostname: sonarr
    env_file:
      - ./sonarr/.env_sonarr
      - .vpn_ip
    networks:
      - traefik_private
    volumes:
      - sonarr:/config
      - ./sonarr/config.xml:/config/config.xml
      - ./ip-test.sh:/opt/ip-test.sh
      - /media/disk2/downloads:/downloads

  jackett:
    image: linuxserver/jackett:arm64v8-0.20.3917
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3
      labels:
        - traefik.enable=true
        - traefik.http.routers.jackett.tls=true
        - traefik.http.routers.jackett.rule=PathPrefix(`/jackett`)
        - traefik.http.services.jackett.loadbalancer.server.port=9117
    hostname: jackett
    env_file:
      - ./jackett/.env_jackett
      - .vpn_ip
    networks:
      - traefik_private
    volumes:
      - jackett:/config
      - ./jackett/ServerConfig.json:/config/Jackett/ServerConfig.json
      - ./ip-test.sh:/opt/ip-test.sh
      - /media/disk2/downloads/torrents:/opt/torrents

