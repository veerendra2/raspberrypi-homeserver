---
- set_fact:
    CUR_USER_HOME: "{{ lookup('env', 'HOME') }}"
    CUR_USER: "{{ ansible_env.USER }}"

- name: Install necessary packges
  apt:
    name: "{{ pkgs }}"
    state: latest
    update_cache: yes
  become: true

- name: Install Snap Packages
  snap:
    name: "{{ snaps }}"
    classic: yes
  become: true

- name: Install Python packges
  pip:
    name: "{{ pip_pkgs }}"
  become: true

- name: Download tools/scripts
  get_url:
    url: "{{ item.value }}"
    dest: "/usr/local/bin/"
    mode: "0766"
  loop: "{{ lookup('dict', tools) }}"
  become: true

- name: Download dotfiles install script
  get_url:
    url: https://raw.githubusercontent.com/veerendra2/dotfiles/master/install.sh
    dest: /tmp/install-dotfiles.sh
    mode: 0775

- name: Run dotfiles install script
  command: /tmp/install-dotfiles.sh

- name: Download Docker install convenience script
  get_url:
    url: https://get.docker.com/
    dest: /tmp/get-docker.sh
    mode: 0775

- name: Run Docker install convenience script
  command: /tmp/get-docker.sh
  environment:
    CHANNEL: stable

- name: Ensure Docker is started.
  service:
    name: docker
    state: started
    enabled: true

- name: Install docker-compose using pip
  pip:
    name: docker-compose
    state: present
    executable: "pip3"

- name: Ensure docker users are added to the docker group
  user:
    name: "{{ ansible_env.USER }}"
    groups: docker
    append: true
  become: true

- name: Build bettercap
  shell: |
    go env -w GO111MODULE=off
    go get -u github.com/bettercap/bettercap

- name: Install bettercap
  shell: |
    mv {{ CUR_USER_HOME }}/go/bin/bettercap /usr/local/bin/
    rm -rf {{ CUR_USER_HOME }}/go
    bettercap -version
  become: true
  register: output

- name: Display bettercap version
  debug:
    msg: "{{ output.stdout }}"
  when: output.rc == 0

- name: Install bettercap caplets
  shell: bettercap -eval "caplets.update; ui.update; q"
  when: output.rc == 0
  ignore_errors: true
  become: true

# - name: Configure ngrok
#   block:
#     - name: Create ngrok config directory /opt/ngrok
#       file:
#         path: /opt/ngrok
#         state: directory

#     - name: Generate ngrok config
#       template:
#         src: templates/ngrok.yml.j2
#         dest: /opt/ngrok/ngrok.yml

#     - name: Copy systemd unit file
#       copy:
#         src: files/ngrok.service
#         dest: /lib/systemd/system

#     - name: start ngrok daemon
#       systemd:
#         name: ngrok
#         enabled: true
#         state: started
#       ignore_errors: true
#   become: true